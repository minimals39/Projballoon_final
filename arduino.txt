#include <Servo.h> 
Servo myservo;
#include "TinyGPS++.h"

TinyGPSPlus gps;

float temp;
int ppm = 60;
char input;
int Angel = 185 ;
int i =0;
unsigned int timestamp = 0;
int count = 0;
int val11;
float val2;
float val3;
int Gpsdata;             // for incoming serial data 
unsigned int finish =0;  // indicate end of message
unsigned int pos_cnt=0;  // position counter
unsigned int lat_cnt=0;  // latitude data counter 
unsigned int log_cnt=0;  // longitude data counter
unsigned int flg    =0;  // GPS flag 
unsigned int com_cnt=0;  // comma counter
char lat[20];            // latitude array
char lg[20];             // longitude array
int tcount = 0;
void Receive_GPS_Data();
/**************************************************************************************
  Function    : setup()
  Description : Use it to initialize variables, pin modes, start using libraries, etc.
                The setup function will only run once, after each power up or reset
                of the Arduino board.
**************************************************************************************/
  void setup()
  {
    Serial.begin(9600);   // opens serial port, sets data rate to 9600 bps
    Serial3.begin(9600);   // opens serial port, sets data rate to 9600 bps
    myservo.attach(9); 
  }
 
/************************************************************************************
  Function    : loop()
  Description : loops consecutively, allowing your program to change and respond.
                Use it to actively control the Arduino board.
************************************************************************************/
  void loop()
  {
    if (Serial.available() > 0) {
    char data = Serial.read();
    Receive_GPS_Data(); 
    switch (data){
    case 'u':
      if (ppm<101){
        ppm=ppm+1;
        myservo.write(ppm);
      }
      break;

    case 'd':
      if (ppm>49){
        ppm=ppm-1;
        myservo.write(ppm);
      }
      break;

    case 's':
      break;
      
    default: 
      Serial.println(ppm);
      myservo.write(ppm); 

      //delay(300);
    }
    //delay(500);
    }
  else {
      Receive_GPS_Data();
      myservo.write(ppm);  
      }
  }
  
  
/************************************************************************************
  Function    : Receive_GPS_Data()
  Description : finding Latitudse and longitude from GPRMC message
 
************************************************************************************/
  void Receive_GPS_Data()
   {
    while(Serial3.available()){ // check for gps data
    if(gps.encode(Serial3.read()))// encode gps data
    { 
      val11=analogRead(1);
      temp=val11/4.092;
      val11=(int)temp;//
      val2=(((val11%100)/10.0)*2)/16.8*100;
//Get the latest info from the gps object which it derived from the data sent by the GPS unit
      Serial.print("X");
      Serial.print(gps.location.lat(), 6);
      Serial.print("_");
      //Serial.print("Y");
      Serial.print(gps.location.lng(), 6);
      Serial.print("_");
      //Serial.print("Z.");
      Serial.print(gps.altitude.meters());
      Serial.print("_");
      Serial.println(val2);
      delay(100);
   }
     
  }
 }